name: 4testing multiarch-build

on:
  push:
    branches: 
      - 'feature/test-tag'

env:
    DOCKER_PATH: "/build/install/docker"
    REPO: "lemmav"
    DOCKERFILE: "Dockerfile.app"

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform: [linux/amd64]
    concurrency: build
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2

      - name: Cache node modules
        id: cache-npm
        uses: actions/cache@v3
        env:
          cache-name: cache-node-modules
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - if: ${{ steps.cache-npm.outputs.cache-hit != 'true' }}
        name: List the state of node modules
        continue-on-error: true
        run: npm list


      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build 4testing
        run: |
          cd .${DOCKER_PATH}
          TAG=$(date "+%Y%m%d%H")
          export DOCKER_TAG=$(echo "${GITHUB_REF_NAME}" | sed '/^release\b\|^hotfix\b\|^feature\b/s/release.*\/\|hotfix.*\/\|feature.*\///')
          
          docker buildx bake -f build.yml \
          --set *.args.GIT_BRANCH=$GITHUB_REF_NAME \
          --set *.platform=linux/amd64 \
          --load

      
          echo "DOCKER_IMAGES for taggig"

          DOCKER_IMAGES=$(docker images --format "{{.Repository}}:{{.Tag}}" | grep "$REPO" | tr '\n' ' ')

          echo "Finished DOCKER_IMAGES"

          echo "DOCKER_IMAGES=$DOCKER_IMAGES"
          IFS=" " read -a IMAGES <<< "$DOCKER_IMAGES"
          for IMAGE in ${IMAGES[@]}; do

            echo "NEW_IMAGE for taggig"
            NEW_IMAGE="$IMAGE"-"$TAG"
            echo "NEW_IMAGE=$NEW_IMAGE"
            docker push "$IMAGE"
            echo "docker tag for taggig"
            docker tag "$IMAGE" "$NEW_IMAGE"

            echo "docker push for taggig"
            docker push "$NEW_IMAGE"
          done

        shell: bash
